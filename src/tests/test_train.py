import pickle

import numpy as np
import pandas as pd
import pytest
from sklearn.pipeline import Pipeline
from training.train import LinRegModel


@pytest.fixture
def model_instance():
    '''
    Returns LinRegModel instance
    '''
    model = LinRegModel()
    return model


@pytest.fixture
def get_train_test_sets():
    '''
    Expected Data generated by LinRegModel class
    '''
    expected_train_data = pd.read_pickle('src/tests/data/train_data.pkl')
    expected_test_data = pd.read_pickle('src/tests/data/test_data.pkl') 

    return expected_train_data, expected_test_data



def test_load_data(get_train_test_sets, model_instance):
    '''
    Verifica carregamento e preprocesasmento dos dados
    * Como o dataset está acoplado a classe do modelo, foi feito o assert exato por simplicidade. 
    mas poderiamos verificar colunas, datatypes, valores nulos, estatísticas, etc.
    '''
    # Actual
    X_train, X_test, y_train, y_test = model_instance.load_data()
    train_data = pd.concat([X_train, y_train], axis=1) 
    test_data = pd.concat([X_test, y_test], axis=1)

    # Expected
    expected_train_data, expected_test_data = get_train_test_sets

    # Asserts
    pd.testing.assert_frame_equal(expected_train_data, train_data)
    pd.testing.assert_frame_equal(expected_test_data, test_data)


def test_fit_model_obj(get_train_test_sets, model_instance):
    '''
    Método deve retornar um objeto do tipo Pipeline
    '''
    train_data, _ = get_train_test_sets
    model = model_instance.fit(train_data.drop(columns=['target']), train_data['target'])

    assert isinstance(model,Pipeline)


def test_fit_fitted_model(get_train_test_sets, model_instance):
    '''
    Verifica se o método retorna um modelo treinado.
    '''
    any_num = 4
    train_data, _ = get_train_test_sets
    model = model_instance.fit(train_data.drop(columns=['target']), train_data['target'])

    assert isinstance(model.predict(np.array(any_num).reshape(1,-1))[0], float)



class MockLinRegModel(LinRegModel):
    '''
    Classe Mock para testar o metodo save de forma isolada.
    '''
    def __init__(self):
        super(MockLinRegModel, self).__init__()
        with open('src/tests/data/model.pkl','rb') as file:
            self.model = pickle.load(file)

@pytest.fixture
def model_mock_instance():
    '''
    Returns LinRegModel mock instance
    '''
    model = MockLinRegModel()
    return model

def test_save_model_obj(tmpdir, model_mock_instance):
    '''
    Método deve salvar um objeto do tipo Pipeline
    '''
    file = tmpdir.mkdir("sub").join('model_test.pkl')
    model_mock_instance.save(file.strpath)

    with open(file.strpath,'rb') as file:
        actual_model = pickle.load(file)
        
    assert isinstance(actual_model,Pipeline)


def test_save_fitted_model(tmpdir, model_mock_instance):
    '''
    Verifica se o método salva um modelo treinado.
    '''
    any_num = 4
    file = tmpdir.mkdir("sub").join('model_test.pkl')
    model_mock_instance.save(file.strpath)

    with open(file.strpath,'rb') as file:
        actual_model = pickle.load(file)

    assert isinstance(actual_model.predict(np.array(any_num).reshape(1,-1))[0], float)
